{"version":3,"sources":["charts/HighChartComponent.jsx","charts/HighChartPie.jsx","Graphs.js","App.js"],"names":["HighChartComponent","props","useState","xAxis","setxAxis","Array","fill","yAxis","setyAxis","useEffect","object","Object","keys","y","map","month","options","chart","plotBackgroundColor","plotBorderWidth","plotShadow","type","title","text","subtitle","categories","legend","layout","align","verticalAlign","credits","enabled","series","name","data","responsive","rules","condition","maxWidth","chartOptions","highCharts","HighCharts","HighChartPie","setData","language","tooltip","pointFormat","accessibility","point","valueSuffix","colors","plotOptions","pie","allowPointSelect","cursor","dataLabels","showInLegend","colorByPoint","Graphs","state","username","languagesPerRepo","starsPerRpo","years","months","this","setState","reposPerLanguage","body","axios","post","headers","then","response","yearsObject","user","contributionsCollection","contributionCalendar","weeks","day","firstDay","substring","year","count","contributionDays","weekDay","contributionCount","key","parseInt","get","languages","repo","stargazers_count","catch","err","console","log","Grid","container","item","xs","sm","md","Card","elevation","spacing","React","ReactElement","observer","MutationObserver","update","observe","attributes","_innerHTML","innerHTML","getAttribute","propTypes","getProps","render","mount","unmount","disconnect","unmountComponentAtNode","filter","attr","convert","value","reduce","prop","attrName","attrValue","propName","find","toLowerCase","isNaN","exec","JSON","parse","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.5ff87593.chunk.js","sourcesContent":["import React from 'react'\nimport HighCharts from 'highcharts';\nimport HighChartsReact from 'highcharts-react-official';\nimport { useEffect, useState} from 'react';\n\n\nconst HighChartComponent = (props) => { \n    const [xAxis, setxAxis] = useState([]);\n    const [yAxis, setyAxis] = useState(Array(12).fill(0));\n\n    useEffect(() =>{   \n        if(props.object) {\n            setxAxis(Object.keys(props.object))\n            let y = Array(12).fill(0)\n            y = Object.keys(props.object).map((month) =>{\n                return props.object[month]\n            })\n            setyAxis(y)\n        }   \n    }, [props.object])\n    \n   \n    const options = {\n        chart: {\n            plotBackgroundColor: null,\n            plotBorderWidth: 0,\n            plotShadow: false,\n            type: 'line'     \n        },\n        title: {\n            text: 'Github profile activity trend'\n        },\n        subtitle: {\n            text: 'Source: github.com'\n        },\n    \n        yAxis: {\n            title: {\n                text: 'Number scale'\n            }\n        },\n    \n        xAxis: {\n            categories: xAxis\n        },\n    \n        legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n        },\n        credits: {\n            enabled: false\n        },\n        series: [ {\n            name: 'Commits',\n            data: yAxis\n        }],\n    \n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: 500\n                },\n                chartOptions: {\n                    legend: {\n                        layout: 'horizontal',\n                        align: 'center',\n                        verticalAlign: 'bottom'\n                    }\n                }\n            }]\n        }\n    }\n\n\n    \n    return (\n        <HighChartsReact\n            highCharts={HighCharts}\n            options={options}\n\n        />\n    )\n}\n\nexport default HighChartComponent;","import React from 'react'\nimport HighCharts from 'highcharts';\nimport HighChartsReact from 'highcharts-react-official';\nimport { useEffect, useState} from 'react';\n\nconst HighChartPie = (props) => {\n    const [data, setData] = useState([]);\n\n    useEffect(() =>{   \n        if(props.object) {\n            let data = Object.keys(props.object).map((language) => {\n                return {name: language, y: props.object[language]}\n            })\n            setData(data)\n        }   \n    }, [props.object])\n  \n    \n\n    const options = {\n        chart: {\n            plotBackgroundColor: null,\n            plotBorderWidth: 0,\n            plotShadow: false,\n            type: 'pie',\n            \n        },\n        title: {\n            text: 'Commit per Language, 2020'\n        },\n        tooltip: {\n            //pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>',\n            pointFormat: '<b>{series.name}</b>: {point.y:.1f}',\n        },\n        accessibility: {\n            point: {\n                valueSuffix: '%'\n            }\n        },\n        credits: {\n            enabled: false\n        },\n        colors: ['#00876c', '#6aaa96',  '#f0b8b8',\n            '#e67f83', '#d43d51',  '#aecdc2', '#f1f1f1'],\n        plotOptions: {\n            pie: {\n                allowPointSelect: true,\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: false\n                },\n                showInLegend: true\n            }\n        },\n        series: [{\n            name: 'Langauge',\n            colorByPoint: true,\n            data: data\n        }]\n    }\n    options.title.text = props.title\n    return (\n        <HighChartsReact\n            highCharts={HighCharts}\n            options={options}\n\n        />\n    )\n}\n\nexport default HighChartPie;\n\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Card } from '@material-ui/core';\nimport HighChartComponent from './charts/HighChartComponent';\nimport HighChartPie from './charts/HighChartPie';\nimport axios from 'axios';\n\nexport default class Graphs extends React.Component {\n\n  static propTypes = {\n    name: PropTypes.string,\n  }\n  state = {\n    username: 'wesbos',\n    languagesPerRepo: null,\n    starsPerRpo: null,\n    years : null\n  }\n  months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n    \n  componentWillMount(){\n    this.setState({username: this.props.username})\n  }\n  componentDidMount() {\n    this.reposPerLanguage()\n  }\n\n  reposPerLanguage() {\n    const body = {\n      \"query\": `query {\n        user(login: \"${this.state.username}\") {\n          name\n          contributionsCollection {\n            contributionCalendar {\n              colors\n              totalContributions\n              weeks {\n                contributionDays {\n                  color\n                  contributionCount\n                  date\n                  weekday\n                }\n                firstDay\n              }\n            }\n          }\n        }\n      }\n         `\n  }\n  axios.post('https://api.github.com/graphql', body, {  headers: {\n      \"Authorization\" : \"token 59dafcf27ebf9fd433e2bd3f51178a5ea5d7cc91\"\n    }}).then((response) => {\n      if(response.data) {\n      let yearsObject={}\n      let weeks  = response.data.data.user.contributionsCollection.contributionCalendar.weeks\n      weeks.map((day) => {\n        let month = day.firstDay.substring(5,7)\n        let year = day.firstDay.substring(2,4)\n        let count = 0;\n        day.contributionDays.map((weekDay) => {\n           count += weekDay.contributionCount;\n        })   \n      let key = `${this.months[parseInt(month)-1]} ${year}`\n      yearsObject[key] ? yearsObject[key] += count  : yearsObject[key] = count\n      })\n      this.setState({years : yearsObject}) \n    }\n  })\n\n  axios.get(`https://api.github.com/users/${this.state.username}/repos?per_page=2000`, {\n    headers: {\n      \"Authorization\" : \"token 59dafcf27ebf9fd433e2bd3f51178a5ea5d7cc91\"\n  }}).then((response) => {\n    let languages={}\n    let starsPerRpo={} \n    response.data.map((repo) => {\n      if(repo.language !== null){\n        languages[repo.language] ?  ++languages[repo.language] : languages[repo.language] = 1 \n      }\n      if(repo.stargazers_count !== null && repo.language !== null)\n        starsPerRpo[repo.language] ? starsPerRpo[repo.language] += repo.stargazers_count : starsPerRpo[repo.language] = 1 \n    })\n    this.setState({languagesPerRepo: languages})\n    this.setState({starsPerRpo: starsPerRpo})\n    }).catch(err => console.log(err))  \n  }\n\n  render() {\n    return (\n      <div >\n        <Grid container item >\n          <Grid item xs={12} sm={12} md={12}>\n            <Card elevation={0}>\n              <HighChartComponent object={this.state.years} />\n            </Card>\n          </Grid>\n\n          <Grid container spacing={2}>\n            {/* <Grid item xs={4} sm={4} md={4}>\n              <Card elevation={0}>\n                <HighChartPie title=\"COMMITS PER LANGUAGE\" object={this.state.languagesPerRepo} />\n              </Card>\n\n            </Grid> */}\n\n            <Grid item xs={6} sm={6} md={6}>\n              <Card elevation={0}>\n                <HighChartPie title=\"REPOSITORIES PER LANGUAGE\" object={this.state.languagesPerRepo} />\n              </Card>\n            </Grid>\n\n            <Grid item xs={6} sm={6} md={6}>\n              <Card elevation={0}>\n                <HighChartPie title=\"STARS PER LANGUAGE\" object={this.state.starsPerRpo} />\n              </Card>\n            </Grid>\n\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import Graphs from './Graphs'\n// import { Avatar} from '@material-ui/core';\n\n// function App() {\n//   return (\n//     <div className=\"App\"> \n//         <Avatar  alt=\"logo\" src={logo} style={{height:70, width:70}}/>\n//         <Graphs username=\"wesbos\"></Graphs>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport * as React from 'react';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport Graphs from './Graphs'\n\nclass ReactElement extends HTMLElement {\n  username = '';\n  constructor() {\n    super();\n    this.observer = new MutationObserver(() => this.update());\n    this.observer.observe(this, { attributes: true });\n  }\n\n  connectedCallback() {\n    this._innerHTML = this.innerHTML;\n    this.username = this.getAttribute(\"username\");\n    const propTypes = Graphs.propTypes ? Graphs.propTypes : {};\n    const props = {\n      ...this.getProps(this.attributes, propTypes),\n    };\n    render(<Graphs {...props} />, this);\n    this.mount();\n  }\n\n  disconnectedCallback() {\n    this.unmount();\n    this.observer.disconnect();\n  }\n\n  update() {\n    this.unmount();\n    this.mount();\n  }\n\n  mount() {\n    const propTypes = Graphs.propTypes ? Graphs.propTypes : {};\n    const props = {\n      ...this.getProps(this.attributes, propTypes),\n    };\n    render(<Graphs {...props} />, this);\n  }\n\n  unmount() {\n    unmountComponentAtNode(this);\n  }\n\n  getProps(attributes, propTypes) {\n    propTypes = propTypes|| {};\n    let arr  =  [ ...attributes ]         \n      .filter(attr => attr.name !== 'style')         \n      .map(attr => this.convert(propTypes, attr.name, attr.value))\n      .reduce((props, prop) => \n        ({ ...props, [prop.name]: prop.value }), {});\n    return arr \n  }\n\n  convert(propTypes, attrName, attrValue) {\n    const propName = Object.keys(propTypes)\n      .find(key => key.toLowerCase() == attrName);\n    let value = attrValue;\n    if (attrValue === 'true' || attrValue === 'false') \n      value = attrValue == 'true';      \n    else if (!isNaN(attrValue) && attrValue !== '') \n      value = +attrValue;      \n    else if (/^{.*}/.exec(attrValue)) \n      value = JSON.parse(attrValue);\n    return {         \n      name: propName ? propName : attrName,         \n      value: value      \n    };\n  }\n}\n\ncustomElements.define('react-el', ReactElement);\n\n\n\n\n\n"],"sourceRoot":""}